		; BEWARE OF DECIMOS DOS CRONOS NO VISOR
		; SE PROBLEMA, FAZER IGUAL AO LAB
		
		ORG	HFF80

STACK:		DAW	[31]
IVET:		DW	0

		DAB	[23]
TIMDT:		DB	0
INTS:		DB	0
INTE:		DB	0
TECST:		DB	0
TECDT:		DB	0
VISOR:		DAB	[36]

		ORG	0

		MOV	#STACK,R6
		CLR	INTS			; LIMPA INTERRUPCOES PENDENTES
		CLR	TECST			; LIMPA SINAIS DO TECLADO
		MOV	#ISR,IVET		; MOVE POSICAO DE ROTINA PARA VETOR
		MOV	#100,TIMDT		; PERIODICIDADE DO TECLADO (10MS)

		; LIMPA CRONOS/REL
		; ANTES DE COMECAR
CLR_CRONOS:	MOV	#24,R0
		MOV	#CRONO_UM,R1

CLR_MEM_LOOP:	CLR	(R1)+
		SOB	R0,CLR_MEM_LOOP

CLR_VISOR:	MOV	#36,R0
		MOV	#VISOR,R1

CLR_VISOR_LOOP:	MOV	#' ',(R1)
		INC	R1
		SOB	R0,CLR_VISOR_LOOP

SET_WAIT:	NOT	WAIT_UM
		NOT	WAIT_DOIS
		NOT	WAIT_TRES

		; PRINCIPAL
		; UPDT VISOR
		; CRONOS OP CONTROL
MAIN:		MOV	#H83,INTE		; HABILITA INTS

		; CHECAR BOOLS
		; PARA ESCRITA
		; OU NAO

VISOR_LOOP:	; ESCREVE VISOR
		; ESCREVE CRONOS SOMENTE SE SHOW ATIVADO
		; PRIMEIRO CRONO
VISOR_UM:	;CMP	FROZEN_UM,#HFFFF
		;BNE	VISOR_DOIS

		MOV	SEGUNDOS_UM,R0
		MOV	#VISOR,R1
		JSR	R7,ESC_TRES_DIG

		MOV	#',',VISOR+3

		MOV	DECIMOS_UM,R0
		MOV	#VISOR+4,R1
		JSR	R7,ESC_DOIS_DIG

		MOV	#'[',VISOR+6
		MOV	LAPS_UM,R0
		ADD	#'0',R0
		MOV	R0,VISOR+7
		MOV	#']',VISOR+8

		; SEGUNDO CRONO
VISOR_DOIS:	;CMP	FROZEN_DOIS,#HFFFF
		;BNE	VISOR_TRES

		MOV	SEGUNDOS_DOIS,R0
		MOV	#VISOR+10,R1
		JSR	R7,ESC_TRES_DIG

		MOV	#',',VISOR+13

		MOV	DECIMOS_DOIS,R0
		MOV	#VISOR+14,R1
		JSR	R7,ESC_DOIS_DIG

		MOV	#'[',VISOR+16
		MOV	LAPS_DOIS,R0
		ADD	#'0',R0
		MOV	R0,VISOR+17
		MOV	#']',VISOR+18

		; TERCEIRO CRONO
VISOR_TRES:	;CMP	SHOW_TRES,#HFFFF
		;BNE	VISOR_REL

		MOV	SEGUNDOS_TRES,R0
		MOV	#VISOR+20,R1
		JSR	R7,ESC_TRES_DIG

		MOV	#',',VISOR+23

		MOV	DECIMOS_TRES,R0
		MOV	#VISOR+24,R1
		JSR	R7,ESC_DOIS_DIG

		MOV	#'[',VISOR+26
		MOV	LAPS_TRES,R0
		ADD	#'0',R0
		MOV	R0,VISOR+27
		MOV	#']',VISOR+28

		;REL
;VISOR_REL:	MOV	MINUTOS_REL,R0
		;MOV	#VISOR+31,R1
		JSR	R7,ESC_DOIS_DIG
		
		MOV	#':',VISOR+33

		MOV	SEGUNDOS_REL,R0
		MOV	#VISOR+34,R1
		JSR	R7,ESC_DOIS_DIG
		
		JMP	VISOR_LOOP

		; NUM DE TRES
		; DIG NO VISOR
ESC_TRES_DIG:	CLR	R3
		CLR	R2

BRK_CENT_TRES:	CMP	R0,#100
		BLT	BRK_DEZ_TRES
		SUB	#100,R0
		INC	R3
		BR	BRK_CENT_TRES

BRK_DEZ_TRES:	CMP	R0,#10
		BLT	ESC_TRES_VISOR
		SUB	#10,R0
		INC	R2
		BR	BRK_DEZ_TRES

ESC_TRES_VISOR:	ADD	#'0',R3
		ADD	#'0',R2
		ADD	#'0',R0
		MOV	R3,(R1)
		INC	R1
		MOV	R2,(R1)
		INC	R1
		MOV	R0,(R1)
		RTS	R7

		; NUM DE DOIS
		; DIG NO VISOR
ESC_DOIS_DIG:	CLR	R2

BRK_DEZ_DOIS:	CMP	R0,#10
		BLT	ESC_DOIS_VISOR
		SUB	#10,R0
		INC	R2
		BR	BRK_DEZ_DOIS

ESC_DOIS_VISOR:	ADD	#'0',R2
		ADD	#'0',R0
		MOV	R2,(R1)
		INC	R1
		MOV	R0,(R1)
		RTS	R7

CRONO_UM:
SEGUNDOS_UM:	DW      0
DECIMOS_UM:	DW      0
LAPS_UM:	DW      0
WAIT_UM:	DW      0
SHOW_UM:	DW      0
FROZEN_UM:	DW      0
FROZEN_C_UM:	DW	50

CRONO_DOIS:
SEGUNDOS_DOIS:	DW      0
DECIMOS_DOIS:	DW      0
LAPS_DOIS:	DW      0
WAIT_DOIS:	DW      0
SHOW_DOIS:	DW      0
FROZEN_DOIS:	DW      0
FROZEN_C_DOIS:	DW	50

CRONO_TRES:
SEGUNDOS_TRES:	DW      0
DECIMOS_TRES:	DW      0
LAPS_TRES:	DW      0
WAIT_TRES:	DW      0
SHOW_TRES:	DW      0
FROZEN_TRES:	DW      0
FROZEN_C_TRES:	DW	50

REL:
MINUTOS_REL:	DW      0
SEGUNDOS_REL:	DW      0
DECIMOS_REL:	DW	0

		; INTERRUPCAO
ISR:		MOV	R0,-(R6)
		MOV	R1,-(R6)
		MOV	R2,-(R6)
		MOV	R3,-(R6)
		MOV	R4,-(R6)
		MOV	R5,-(R6)
		
		MOV	INTS,R0
		JSR	R7,INT_SORT
		CLR	TECST
		AND	#HFFFC,INTS		; DESLIGA INTS

ISR_RETURN:	MOV	(R6)+,R5
		MOV	(R6)+,R4
		MOV	(R6)+,R3
		MOV	(R6)+,R2
		MOV	(R6)+,R1
		MOV	(R6)+,R0
		RTI

INT_SORT:	AND	#2,R0
		BNE	ISR_TEC
		JMP	ISR_TIMER

;;;;;; ARRUMAR JMPS TECLA 3 DEPOIS!!!!
ISR_TEC:	CMP	#'1',TECDT
		BEQ	ADJ_BOOLS_UM
		CMP	#'2',TECDT
		BEQ	ADJ_BOOLS_DOIS
		; CMP	#'3',TECDT
		; BEQ	ADJ_BOOLS_TRES
		JMP	ADJ_BOOLS_TRES
		RTS	R7

ADJ_BOOLS_UM:	CMP	WAIT_UM,#HFFFF
		BEQ	ACTV_SHOW_UM
		CMP	SHOW_UM,#HFFFF
		BEQ	ACTV_FRZN_UM
		JMP	ACTV_WAIT_UM

ACTV_SHOW_UM:	NOT	WAIT_UM			; DESATIVA WAIT
		NOT	SHOW_UM			; ATIVA SHOW
		INC	LAPS_UM
		JMP	ISR_TEC_FIM

		; DEVE INICIAR CONTADOR DE 5S
ACTV_FRZN_UM:	NOT	SHOW_UM
		NOT	FROZEN_UM
		MOV	#0,SEGUNDOS_UM
		MOV	#0,DECIMOS_UM
		INC	LAPS_UM
		CMP	#10,LAPS_UM
		BEQ	ZERAR_LAPS_UM
		JMP	ISR_TEC_FIM

ZERAR_LAPS_UM:	MOV	#0,LAPS_UM
		JMP	ISR_TEC_FIM

ACTV_WAIT_UM:	NOT	FROZEN_UM
		NOT	WAIT_UM
		CLR	LAPS_UM
		CLR	DECIMOS_UM
		CLR	SEGUNDOS_UM
		MOV	#50,FROZEN_C_UM
		JMP	ISR_TEC_FIM

ADJ_BOOLS_DOIS:	CMP	WAIT_DOIS,#HFFFF
		BEQ	ACTV_SHOW_DOIS
		CMP	SHOW_DOIS,#HFFFF
		BEQ	ACTV_FRZN_DOIS
		JMP	ACTV_WAIT_DOIS

ACTV_SHOW_DOIS:	NOT	WAIT_DOIS		; DESATIVA WAIT
		NOT	SHOW_DOIS		; ATIVA SHOW
		INC	LAPS_DOIS
		JMP	ISR_TEC_FIM

		; DEVE INICIAR CONTADOR DE 5S
ACTV_FRZN_DOIS:	NOT	SHOW_DOIS
		NOT	FROZEN_DOIS
		MOV	#0,SEGUNDOS_DOIS
		MOV	#0,DECIMOS_DOIS
		INC	LAPS_DOIS
		CMP	#10,LAPS_DOIS
		BEQ	ZERAR_LAPS_DOIS
		JMP	ISR_TEC_FIM

ZERAR_LAPS_DOIS:MOV	#0,LAPS_DOIS
		JMP	ISR_TEC_FIM

ACTV_WAIT_DOIS:	NOT	FROZEN_DOIS
		NOT	WAIT_DOIS
		CLR	LAPS_DOIS
		CLR	DECIMOS_DOIS
		CLR	SEGUNDOS_DOIS
		MOV	#50,FROZEN_C_DOIS
		JMP	ISR_TEC_FIM

ADJ_BOOLS_TRES:	CMP	WAIT_TRES,#HFFFF
		BEQ	ACTV_SHOW_TRES
		CMP	SHOW_TRES,#HFFFF
		BEQ	ACTV_FRZN_TRES
		JMP	ACTV_WAIT_TRES

ACTV_SHOW_TRES:	NOT	WAIT_TRES		; DESATIVA WAIT
		NOT	SHOW_TRES		; ATIVA SHOW
		INC	LAPS_TRES
		BR	ISR_TEC_FIM

		; DEVE INICIAR CONTADOR DE 5S
ACTV_FRZN_TRES:	NOT	SHOW_TRES
		NOT	FROZEN_TRES
		MOV	#0,SEGUNDOS_TRES
		MOV	#0,DECIMOS_TRES
		INC	LAPS_TRES
		CMP	#10,LAPS_TRES
		BEQ	ZERAR_LAPS_TRES
		JMP	ISR_TEC_FIM

ZERAR_LAPS_TRES:MOV	#0,LAPS_TRES
		JMP	ISR_TEC_FIM

ACTV_WAIT_TRES:	NOT	FROZEN_TRES
		NOT	WAIT_TRES
		CLR	LAPS_TRES
		CLR	DECIMOS_TRES
		CLR	SEGUNDOS_TRES
		MOV	#50,FROZEN_C_TRES
		JMP	ISR_TEC_FIM

ISR_TEC_FIM:	CLR	TECST
		RTS	R7

		; UPDATE CRONOS
ISR_TIMER:	INC	DECIMOS_REL
		CMP	DECIMOS_REL,#10
		BLT	CHECK_UM
		CLR	DECIMOS_REL
		
		INC	SEGUNDOS_REL
		CMP	SEGUNDOS_REL,#60
		BLT	CHECK_UM
		CLR	SEGUNDOS_REL

		INC	MINUTOS_REL
		CMP	MINUTOS_REL,#60
		BLT	CHECK_UM
		CLR	MINUTOS_REL

CHECK_UM:	CMP	SHOW_UM,#HFFFF
		BEQ	UPDT_UM
		JMP	CHECK_DOIS

UPDT_UM:	INC	DECIMOS_UM
		CMP	DECIMOS_UM,#10
		BLT	CHECK_DOIS
		CLR	DECIMOS_UM

		INC	SEGUNDOS_UM
		CMP	SEGUNDOS_UM,#999
		BLT	CHECK_DOIS
		CLR	SEGUNDOS_UM
		
CHECK_DOIS:	CMP	SHOW_UM,#HFFFF
		BEQ	UPDT_DOIS
		JMP	CHECK_TRES


UPDT_DOIS:	INC	DECIMOS_DOIS
		CMP	DECIMOS_DOIS,#10
		BLT	CHECK_TRES
		CLR	DECIMOS_DOIS

		INC	SEGUNDOS_DOIS
		CMP	SEGUNDOS_DOIS,#999
		BLT	CHECK_TRES
		CLR	SEGUNDOS_DOIS

CHECK_TRES:	CMP	SHOW_TRES,#HFFFF
		BEQ	UPDT_TRES
		JMP	CHECK_FRZN_UM


UPDT_TRES:	INC	DECIMOS_TRES
		CMP	DECIMOS_TRES,#10
		BLT	CHECK_FRZN_UM
		CLR	DECIMOS_DOIS

		INC	SEGUNDOS_DOIS
		CMP	SEGUNDOS_DOIS,#999
		BLT	CHECK_FRZN_UM
		CLR	SEGUNDOS_DOIS

		; CMP BOOLS SE CRONOS
		; ESTAO EM SHOW. SE
		; SIM, ATUALIZA VAR
CHECK_FRZN_UM:	CMP	FROZEN_UM,#HFFFF
		BEQ	DEC_FRZN_C_UM
		JMP	CHECK_FRZN_DOIS

DEC_FRZN_C_UM:	DEC	FROZEN_C_UM
		BNE	CHECK_FRZN_DOIS
		NOT	FROZEN_UM
		NOT	WAIT_UM
		MOV	#50,FROZEN_C_UM

CHECK_FRZN_DOIS:CMP	FROZEN_DOIS,#HFFFF
		BEQ	DEC_FRZN_C_DOIS
		JMP	CHECK_FRZN_TRES

DEC_FRZN_C_DOIS:DEC	FROZEN_C_DOIS
		BNE	CHECK_FRZN_TRES
		NOT	FROZEN_DOIS
		NOT	WAIT_DOIS
		MOV	#50,FROZEN_C_DOIS

CHECK_FRZN_TRES:CMP	FROZEN_TRES,#HFFFF
		BEQ	DEC_FRZN_C_UM
		JMP	ISR_TIMER_FIM

DEC_FRZN_C_TRES:DEC	FROZEN_C_TRES
		BNE	ISR_TIMER_FIM
		NOT	FROZEN_TRES
		NOT	WAIT_TRES
		MOV	#50,FROZEN_C_TRES

ISR_TIMER_FIM:	RTS	R7

		
